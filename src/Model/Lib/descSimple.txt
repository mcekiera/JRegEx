^     The beginning of a line
$     The end of a line
\b     A word boundary
\B     A non-word boundary
\A     The beginning of the input
\G     The end of the previous match
\Z     The end of the input but for the final terminator, if any
\z     The end of the input
.     Any character (may or may not match line terminators)
\d     A digit: [0-9]
\D     A non-digit: [^0-9]
\s     A whitespace character: [ \t\n\x0B\f\r]
\S     A non-whitespace character: [^\s]
\w     A word character: [a-zA-Z_0-9]
\W     A non-word character: [^\w]
\p{Lower}     A lower-case alphabetic character: [a-z]
\p{Upper}     An upper-case alphabetic character:[A-Z]
\p{ASCII}     All ASCII:[\x00-\x7F]
\p{Alpha}     An alphabetic character:[\p{Lower}\p{Upper}]
\p{Digit}     A decimal digit: [0-9]
\p{Alnum}     An alphanumeric character:[\p{Alpha}\p{Digit}]
\p{Punct}     Punctuation: One of !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
\p{Graph}     A visible character: [\p{Alnum}\p{Punct}]
\p{Print}     A printable character: [\p{Graph}\x20]
\p{Blank}     A space or a tab: [ \t]
\p{Cntrl}     A control character: [\x00-\x1F\x7F]
\p{XDigit}     A hexadecimal digit: [0-9a-fA-F]
\p{Space}     A whitespace character: [ \t\n\x0B\f\r]
\p{javaLowerCase}     Equivalent to java.lang.Character.isLowerCase()
\p{javaUpperCase}     Equivalent to java.lang.Character.isUpperCase()
\p{javaWhitespace}     Equivalent to java.lang.Character.isWhitespace()
\p{javaMirrored}     Equivalent to java.lang.Character.isMirrored()
\p{IsLatin}     A Latin script character (script)
\p{InGreek}     A character in the Greek block (block)
\p{Lu}     An uppercase letter (category)
\p{IsAlphabetic}     An alphabetic character (binary property)
\p{Sc}     A currency symbol
\P{Lower}     Any character except one of a lower-case alphabetic character: [a-z]
\P{Upper}     Any character except one of an upper-case alphabetic character:[A-Z]
\P{ASCII}     Any character except one of an ASCII:[\x00-\x7F]
\P{Alpha}     Any character except one of an alphabetic character:[\p{Lower}\p{Upper}]
\P{Digit}     Any character except one of a decimal digit: [0-9]
\P{Alnum}     Any character except one of an alphanumeric character:[\p{Alpha}\p{Digit}]
\P{Punct}     Any character except one of: !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
\P{Graph}     Any character except one of a visible character: [\p{Alnum}\p{Punct}]
\P{Print}     Any character except one of a printable character: [\p{Graph}\x20]
\P{Blank}     Any character except one of a space or a tab: [ \t]
\P{Cntrl}     Any character except one of a control character: [\x00-\x1F\x7F]
\P{XDigit}     Any character except one of a hexadecimal digit: [0-9a-fA-F]
\P{Space}     Any character except one of a whitespace character: [ \t\n\x0B\f\r]
\P{javaLowerCase}     Any character except one of a equivalent to java.lang.Character.isLowerCase()
\P{javaUpperCase}     Any character except one of a equivalent to java.lang.Character.isUpperCase()
\P{javaWhitespace}     Any character except one of a equivalent to java.lang.Character.isWhitespace()
\P{javaMirrored}     Any character except one of a equivalent to java.lang.Character.isMirrored()
\P{IsLatin}     Any character except one of a Latin script character (script)
\P{InGreek}     Any character except one of a character in the Greek block (block)
\P{Lu}     Any character except one of an uppercase letter (category)
\P{IsAlphabetic}     Any character except one of an alphabetic character (binary property)
\P{Sc}     Any character except one of a currency symbol
\t     The tab character ('\u0009')
\n     The newline (line feed) character ('\u000A')
\r     The carriage-return character ('\u000D')
\f     The form-feed character ('\u000C')
\a     The alert (bell) character ('\u0007')
\e     The escape character ('\u001B')
\     Nothing, but quotes the following character
\Q     Nothing, but quotes all characters until \E
\E     Nothing, but ends quoting started by \Q
?     Greedy once or not at all,
*     Greedy zero or more times
+     Greedy one or more times
??     Reluctant quantifier, once or not at all
*?     Reluctant quantifier, zero or more times
+?     Reluctant quantifier, one or more times
?+     Possessive quantifier, once or not at all
*+     Possessive quantifier, zero or more times
++     Possessive quantifier, one or more times
\0     The character with octal value
\x     The character with hexadecimal value
\u     The character with hexadecimal value
\c     The control character corresponding to
